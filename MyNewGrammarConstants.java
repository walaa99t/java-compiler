/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package ass;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Plus = 5;
  /** RegularExpression Id. */
  int Number = 6;
  /** RegularExpression Id. */
  int Assignment = 7;
  /** RegularExpression Id. */
  int Semicolon = 8;
  /** RegularExpression Id. */
  int If = 9;
  /** RegularExpression Id. */
  int Else = 10;
  /** RegularExpression Id. */
  int ElseIf = 11;
  /** RegularExpression Id. */
  int For = 12;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int While = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int Switch = 17;
  /** RegularExpression Id. */
  int Case = 18;
  /** RegularExpression Id. */
  int Default = 19;
  /** RegularExpression Id. */
  int Input = 20;
  /** RegularExpression Id. */
  int Output = 21;
  /** RegularExpression Id. */
  int True = 22;
  /** RegularExpression Id. */
  int False = 23;
  /** RegularExpression Id. */
  int Bool = 24;
  /** RegularExpression Id. */
  int Int = 25;
  /** RegularExpression Id. */
  int String = 26;
  /** RegularExpression Id. */
  int Scanner = 27;
  /** RegularExpression Id. */
  int New = 28;
  /** RegularExpression Id. */
  int Next = 29;
  /** RegularExpression Id. */
  int NextInt = 30;
  /** RegularExpression Id. */
  int LeftParenthesis = 31;
  /** RegularExpression Id. */
  int RightParenthesis = 32;
  /** RegularExpression Id. */
  int LeftBrace = 33;
  /** RegularExpression Id. */
  int RightBrace = 34;
  /** RegularExpression Id. */
  int InputEnd = 35;
  /** RegularExpression Id. */
  int StringQuat = 36;
  /** RegularExpression Id. */
  int Dot = 37;
  /** RegularExpression Id. */
  int DoubleDot = 38;
  /** RegularExpression Id. */
  int Compare = 39;
  /** RegularExpression Id. */
  int IncDec = 40;
  /** RegularExpression Id. */
  int Id = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<Plus>",
    "<Number>",
    "\"=\"",
    "\";\"",
    "\"if\"",
    "\"else\"",
    "\"else if\"",
    "\"for\"",
    "\"break\"",
    "\"continue\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"System.in\"",
    "\"System.out.println\"",
    "\"True\"",
    "\"False\"",
    "\"bool\"",
    "\"int\"",
    "\"String\"",
    "\"Scanner\"",
    "\"new\"",
    "\"next\"",
    "\"nextInt\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"end\"",
    "\"\\\'\"",
    "\".\"",
    "\":\"",
    "<Compare>",
    "<IncDec>",
    "<Id>",
    "\"\\\"\"",
  };

}
